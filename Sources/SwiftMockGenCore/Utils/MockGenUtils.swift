
//
//  Copyright (c) 2018. Uber Technologies
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import Foundation
import SourceKittenFramework


typealias ProtocolMapEntryType = (structure: Structure, file: File, models: [Model], attributes: [String])

extension File {
    
    func lines(starting keyword: String) -> [String] {
        let imports = lines.filter { (line: Line) -> Bool in
            return line.content.trimmingCharacters(in: CharacterSet.whitespaces).starts(with: keyword)
            }.map { (line: Line) -> String in
                return line.content
        }
        return imports
    }
}


public extension Sequence {
    
    func compactMap<T>(path: KeyPath<Element, T?>) -> [T] {
        return compactMap { (element) -> T? in
            element[keyPath: path]
        }
    }
    func map<T>(path: KeyPath<Element, T>) -> [T] {
        return map { (element) -> T in
            element[keyPath: path]
        }
    }
    
    func filter(path: KeyPath<Element, Bool>) -> [Element] {
        return filter { (element) -> Bool in
            element[keyPath: path]
        }
    }
    
    func sorted<T>(path: KeyPath<Element, T>) -> [Element] where T: Comparable {
        return sorted { (lhs, rhs) -> Bool in
            lhs[keyPath: path] < rhs[keyPath: path]
        }
    }
}


extension String {
    static let `static` = "static"
    static let `import` = "import "
    static public let `class` = "class"
    static let override = "override"
    static let mockType = "protocol"
    static let any = "Any"
    static let anyObject = "AnyObject"
    static let fatalError = "fatalError"
    static let handlerSuffix = "Handler"
    static let observableVarPrefix = "Observable<"
    static let rxObservableVarPrefix = "RxSwift.Observable<"
    static let publishSubjectPrefix = "PublishSubject"
    static let observableEmpty = "Observable.empty()"
    static let rxObservableEmpty = "RxSwift.Observable.empty()"
    static let subjectSuffix = "Subject"
    static let underlyingVarPrefix = "underlying"
    static let setCallCountSuffix = "SetCallCount"
    static let callCountSuffix = "CallCount"
    static let closureVarSuffix = "Handler"
    static let initializerPrefix = "init("
    static let `escaping` = "@escaping"
    static public let mockAnnotation = "@CreateMock"
    static public let poundIfMock = "#if MOCK"
    static public let poundEndIf = "#endif"
    static public let headerDoc = """
//  Copyright Â© Uber Technologies, Inc. All rights reserved.
//
//  @generated by SwiftMockGen
//  swiftlint:disable custom_rules

"""
    var isNotEmpty: Bool {
        return !isEmpty
    }
    
    var capitlizeFirstLetter: String {
        return prefix(1).capitalized + dropFirst()
    }
    func shouldParse(with exclusionList: [String]? = nil) -> Bool {
        guard hasSuffix(".swift") else { return false }
        if let filtered = exclusionList?.filter ({
            return components(separatedBy: ".swift").first?.hasSuffix($0) ?? false
        }) {
            return filtered.count == 0
        }
        return false
    }
    
    var displayableComponents: [String] {
        let ret = self.replacingOccurrences(of: "?", with: "Optional")
        return ret.components(separatedBy: CharacterSet.alphanumerics.inverted)
    }
    
    var displayableForType: String {
        return displayableComponents.map{$0 == UnknownVal ? "" : $0.capitlizeFirstLetter}.joined()
    }
}

extension Structure {
    func isAnnotated(with annotation: String, in content: String) -> Bool {
        return extractDocComment(content).contains(annotation)
    }
    
    func extractDocComment(_ content: String) -> String {
        let len = dictionary["key.doclength"] as? Int64 ?? 0
        let offset = dictionary["key.docoffset"] as? Int64 ?? -1
        
        return SwiftMockGenCore.extract(offset: offset, length: len, content: content)
    }
    
    func extractAttributes(_ content: String, filterOn: String? = nil) -> [String] {
        guard let attributeDict = attributes else {
            return []
        }
        
        return attributeDict.compactMap { (attribute: [String: SourceKitRepresentable]) -> String? in
            if let attributeVal = attribute["key.attribute"] as? String {
                if let filterAttribute = filterOn, attributeVal != filterAttribute {
                    return nil
                }
                
                return extract(attribute, from: content)
            }
            return nil
        }
    }
    
    func extract(_ source: [String: SourceKitRepresentable], from content: String) -> String {
        if let offset = source[SwiftDocKey.offset.rawValue] as? Int64,
            let len = source[SwiftDocKey.length.rawValue] as? Int64 {
            
            return SwiftMockGenCore.extract(offset: offset, length: len, content: content)
        }
        return ""
    }
}

private let defaultValuesDict =
["Int": "0",
"Int64": "0",
"Int32": "0",
"Int16": "0",
"Int8": "0",
"UInt": "0",
"UInt64": "0",
"UInt32": "0",
"UInt16": "0",
"UInt8": "0",
"Float": "0.0",
"CGFloat": "0.0",
"Double": "0.0",
"Bool": "false",
"String": "\"\"",
"Character": "\"\"",
"TimeInterval": "0.0",
"NSTimeInterval": "0.0",
"RxTimeInterval": "0.0",
"PublishSubject": "PublishSubject()",
"Date": "Date()",
"NSDate": "NSDate()",
"CGRect": ".zero",
"CGSize": ".zero",
"CGPoint": ".zero",
"UIEdgeInsets": ".zero",
"UIColor": ".white",
"UIFont": ".systemFont(ofSize: 12)",
"UIImage": "UIImage()",
"UIView": "UIView(frame: .zero)",
"UIViewController": "UIViewController()",
"UICollectionView": "UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewLayout())",
"UICollectionViewLayout": "UICollectionViewLayout()",
"UIScrollView": "UIScrollView()",
"UIScrollViewKeyboardDismissMode": ".interactive",
"UIAccessibilityTraits": ".none",
"Void": "Void",
"URL": "URL(string: \"\")",
"NSURL": "NSURL(string: \"\")",
"UUID": "UUID()",
];

private func defaultVal(typeName: String) -> String? {
    // TODO: add more robust handling
    if typeName.hasSuffix("?") {
        return "nil"
    }
    
    if typeName.hasPrefix("["), typeName.hasSuffix("]") {
        return "\(typeName)()"
    }

    if typeName.hasPrefix(String.observableVarPrefix), typeName.hasSuffix(">") {
        return String.observableEmpty
    }

    if typeName.hasPrefix(String.rxObservableVarPrefix), typeName.hasSuffix(">") {
        return String.rxObservableEmpty
    }

    if typeName.hasSuffix(">") &&
        (typeName.hasPrefix("Array<") ||
        typeName.hasPrefix("Set<") ||
        typeName.hasPrefix("Dictionary<") ||
        typeName.hasPrefix("PublishSubject<")) {
        return "\(typeName)()"
    }
    
    if let val = defaultValuesDict[typeName] {
        return val
    }
    return nil
}



// Process substrings containing angled or square brackets by replacing a comma delimiter
// with another delimiter (e.g. ;) to make it easier to parse tuples
// @param arg The type string to be parsed
// @param left The opening bracket character
// @param right The closing bracket character
// @returns The processed string with a new delimiter
private func parseBrackets(_ arg: String, left: String, right: String) -> String {
    var mutableArg = arg
    var nextRange: Range<String.Index>? = nil
    while let leftRange = mutableArg.range(of: left, options: String.CompareOptions.caseInsensitive, range: nextRange, locale: nil),
        let rightRange = mutableArg.range(of: right, options: String.CompareOptions.caseInsensitive, range: nextRange, locale: nil) {
            let bound = leftRange.lowerBound..<rightRange.lowerBound
            let sub = mutableArg.substring(with: bound)
            let newsub = sub.replacingOccurrences(of: ",", with: ";")
            mutableArg = mutableArg.replacingOccurrences(of: sub, with: newsub)
            
            if let nextIdx = mutableArg.index(rightRange.upperBound, offsetBy: 1, limitedBy: mutableArg.endIndex) {
                nextRange = nextIdx..<mutableArg.endIndex
            } else {
                break
            }
    }
    
    return mutableArg
}

// Parse the string containing tuples or brackets and returns a default value for each type component
// @param arg The type string to be parsed
// @returns The parsed string containing a default value for each type component
private func parseParens(_ arg: String) -> String? {
    var stack = [[String]]()
    
    // First process substrings with brackets: replace a comma with another delimiter
    var parsedArg = parseBrackets(arg, left: "<", right: ">")
    parsedArg = parseBrackets(parsedArg, left: "[", right: "]")
    
    // Separate the input by a comma delimiter and process each sub component
    let comps = parsedArg.components(separatedBy: CharacterSet(charactersIn: ",")).filter(path: \.isNotEmpty)
    if comps.count == 1 {
        let sub = parsedArg.trimmingCharacters(in: CharacterSet.whitespaces)
        // There's only one component, so just look up the default value for the component
        if let val = defaultVal(typeName: sub) {
            return val
        }
        
        // In case it contains a label, look up the type portion
        if let labelSub = sub.components(separatedBy: ":").last?.trimmingCharacters(in: CharacterSet.whitespaces) {
            return defaultVal(typeName: labelSub)
        }
    } else {
        let subcomps = comps.filter(path: \.isNotEmpty)
        
        for comp in subcomps {
                var sub = comp.trimmingCharacters(in: CharacterSet.whitespaces)
                
                // Process tuples by stripping parens and recursively calling on the remaining substring portion
                if sub.hasPrefix("("), sub.hasSuffix(")") {
                    sub.removeFirst()
                    sub.removeLast()
                    stack.append(["("])
                    if let val = parseParens(sub) {
                        stack[stack.count - 1].append(val)
                    } else {
                        return nil
                    }
                    stack[stack.count - 1].append(")")
                } else if sub.hasPrefix("(") {
                    sub.removeFirst()
                    stack.append(["("])
                    if let val = parseParens(sub) {
                        stack[stack.count - 1].append(val)
                    } else {
                        return nil
                    }
                } else if sub.hasSuffix(")") {
                    sub.removeLast()
                    if !stack.isEmpty {  // Adding this as a safe guard but this check should not be needed
                        if let val = parseParens(sub) {
                            stack[stack.count - 1].append(val)
                        } else {
                            return nil
                        }
                        stack[stack.count - 1].append(")")
                    }
                    stack.append([""])
                } else {
                    if let val = parseParens(sub), !val.isEmpty {
                        if stack.isEmpty {
                            stack.append([val])
                        } else {
                            stack[stack.count - 1].append(val)
                        }
                    } else {
                        return nil
                    }
                }
        }
    }
    
    // Now combine them with a comma delimiter
    let result = stack.flatMap{$0}.filter(path: \.isNotEmpty).joined(separator: ", ")
    return result
}

// Cleanup the input string if it contains extra unneeded commas
private func lintCommas(_ arg: String) -> String {
    // Replace the other delimiter back to a comma delimiter
    var replaced = arg.replacingOccurrences(of: ";", with: ",")
    // Remove any excessive commas added from joining
    for left in ["(,", "( ,"] {
        replaced = replaced.replacingOccurrences(of: left, with: "(")
    }
    for right in [",)", ", )"] {
        replaced = replaced.replacingOccurrences(of: right, with: ")")
    }
    return replaced
}

func processDefaultVal(typeName: String, typeKeys: [String]? = nil) -> String? {
    
    if let val = defaultVal(typeName: typeName) {
        return val
    }
    if let typeKeys = typeKeys, typeKeys.contains(typeName) {
        return "\(typeName)Mock()"
    }
    if let result = parseParens(typeName) {
        return lintCommas(result)
    }
    return nil
}
